
name: Crashpad Precompile
on: [push, pull_request]
jobs: 
    unix:
      name: ${{ matrix.cfg.name }} amd64
      runs-on: ${{ matrix.cfg.os }}
      strategy:
        fail-fast: false
        matrix:
          cfg:
            - { os: ubuntu-latest, name: "Linux", target_cpu: "x64", artifact: "lib/linux/amd64", upload_include: True}
            - { os: macos-latest,  name: "macOS", target_cpu: "x64", artifact: "lib/macos/amd64", upload_include: False}
      steps:
        - name: Install Dependencies (Linux)
          if: runner.os == 'Linux'
          run: sudo apt update -y && sudo apt install -y build-essential zlib1g-dev libcurl4-openssl-dev jq

        - uses: actions/setup-python@v5
          with:
            python-version: '3.11'
 
        - name: Checkout depot_tools
          run: git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git --depth=1

        - name: Add depot_tools to PATH
          run: echo "$(pwd)/depot_tools" >> $GITHUB_PATH

        - name: Checkout Source
          uses: actions/checkout@v4
          with:
            path: 'precompile'

        - name: Copy .gclient file
          run: cp precompile/.ci/gclient .gclient

        - name: Checkout Crashpad
          run: gclient sync

        - name: Get short crashpad commit hash
          run: |
            echo "$(git log -1 --pretty=format:'[%h][%an][%ar]: %s')" >> $GITHUB_STEP_SUMMARY


        - name: Generate build files (Linux)
          if: runner.os == 'Linux'
          working-directory: crashpad
          run: gn gen out/Default --args='target_cpu="${{ matrix.cfg.target_cpu }}" clang_path="//third_party/linux/clang/linux-amd64" target_sysroot="//third_party/linux/sysroot" is_debug=false'

        - name: Generate build files (macOS)
          working-directory: crashpad
          if: runner.os == 'macOS'
          run: gn gen out/Default --args='target_cpu="x64" is_debug=false'

        - name: Build Crashpad
          working-directory: crashpad
          run: ninja -C out/Default crashpad_handler

        - name: Prepare artifact directory (all)
          run: |
            mkdir -p /tmp/crashpad/${{ matrix.cfg.artifact }}
            mkdir -p /tmp/crashpad/bin/${{ matrix.cfg.name }}.${{ matrix.cfg.target_cpu }}
            # Copy crashpad binaries
            cp crashpad/out/Default/crashpad_handler /tmp/crashpad/bin/${{ matrix.cfg.name }}.${{ matrix.cfg.target_cpu }}
            cp crashpad/out/Default/obj/client/libclient.a /tmp/crashpad/${{ matrix.cfg.artifact }}/libclient.a
            cp crashpad/out/Default/obj/client/libcommon.a /tmp/crashpad/${{ matrix.cfg.artifact }}/libcommon.a
            cp crashpad/out/Default/obj/util/libutil.a /tmp/crashpad/${{ matrix.cfg.artifact }}/libutil.a
            cp crashpad/out/Default/obj/third_party/mini_chromium/mini_chromium/base/libbase.a /tmp/crashpad/${{ matrix.cfg.artifact }}/libbase.a

        - name: Prepare artifact directory (mac)
          if: runner.os == 'macOS'
          run: |
            # copy mac specific crashpad binaries
            cp crashpad/out/Default/obj/BUILD_DIR/gen/util/mach/mig_output.child_portServer.o /tmp/crashpad/${{ matrix.cfg.artifact }}/mig_output.child_portServer.o
            cp crashpad/out/Default/obj/BUILD_DIR/gen/util/mach/mig_output.child_portUser.o /tmp/crashpad/${{ matrix.cfg.artifact }}/mig_output.child_portUser.o
            cp crashpad/out/Default/obj/BUILD_DIR/gen/util/mach/mig_output.notifyUser.o /tmp/crashpad/${{ matrix.cfg.artifact }}/mig_output.excServer.o
            cp crashpad/out/Default/obj/BUILD_DIR/gen/util/mach/mig_output.excServer.o /tmp/crashpad/${{ matrix.cfg.artifact }}/mig_output.excUser.o
            cp crashpad/out/Default/obj/BUILD_DIR/gen/util/mach/mig_output.excUser.o /tmp/crashpad/${{ matrix.cfg.artifact }}/mig_output.mach_excServer.o
            cp crashpad/out/Default/obj/BUILD_DIR/gen/util/mach/mig_output.notifyServer.o /tmp/crashpad/${{ matrix.cfg.artifact }}/mig_output.mach_excUser.o
            cp crashpad/out/Default/obj/BUILD_DIR/gen/util/mach/mig_output.mach_excUser.o /tmp/crashpad/${{ matrix.cfg.artifact }}/mig_output.notifyServer.o
            cp crashpad/out/Default/obj/BUILD_DIR/gen/util/mach/mig_output.mach_excServer.o /tmp/crashpad/${{ matrix.cfg.artifact }}/mig_output.notifyUser.o

        - name: Upload artifacts
          uses: actions/upload-artifact@v4
          with:
            name: crashpad-${{ matrix.cfg.name }}-${{ matrix.cfg.target_cpu }}
            path: /tmp/crashpad

    windows:
      name: ${{ matrix.cfg.name }}
      runs-on: ${{ matrix.cfg.os }}
      strategy:
        fail-fast: false
        matrix:
          cfg:
            # arch is for ilammy/msvc-dev-cmd, because it won't accept i386 as input, and target_cpu is for gn
            - { os: windows-latest, name: "Windows i386",  arch: "x86", artifact: "lib/windows/i386"}
            - { os: windows-latest, name: "Windows amd64", arch: "x64", artifact: "lib/windows/amd64"}
      steps:
        - name: Checkout depot_tools
          run: git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git --depth=1

        - name: Add depot_tools to PATH
          run: echo "${{github.workspace}}/depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

        - name: Checkout Source
          uses: actions/checkout@v4
          with:
            path: 'precompile'

        - name: Copy .gclient file
          run: cp precompile/.ci/gclient .gclient

        - name: Configure MSBuild
          uses: ilammy/msvc-dev-cmd@v1
          with:
            arch: ${{ matrix.cfg.arch }}

        - name: Checkout Crashpad
          run: gclient sync

        - name: Generate build files
          working-directory: crashpad
          run: gn gen out/Default --args='target_cpu=\"${{ matrix.cfg.arch }}\"'

        - name: Build Crashpad
          working-directory: crashpad
          run: ninja -C out/Default crashpad_handler